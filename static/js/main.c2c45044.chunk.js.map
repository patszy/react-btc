{"version":3,"sources":["components/CryptoItem.js","components/CryptoList.js","Crypto.js","components/Heading.js","App.js","serviceWorker.js","index.js"],"names":["CryptoItem","props","className","color","last","currency","symbol","CryptoList","cryptoCollection","cryptoList","map","crypto","key","colorClass","Crypto","getData","axios","get","then","res","cryptoData","data","cryptoArray","i","prevCrypto","state","classValue","undefined","cryptoObj","push","setState","filteredCrypto","filterData","filteredCryptoData","filter","toLowerCase","includes","filterInput","value","this","timer","setInterval","type","placeholder","autoFocus","onChange","ref","input","Component","Heading","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAaeA,EAXI,SAAAC,GACf,OACI,kBAAC,WAAD,KACI,4CACA,0BAAMC,UAAWD,EAAME,OAAvB,IAAgCF,EAAMG,KAAtC,KACA,8BAAOH,EAAMI,UACb,kCAAQJ,EAAMK,OAAd,OCiBGC,EAtBI,SAAAN,GAEf,IAAMO,EAAmBP,EAAMQ,WAAWC,KAAI,SAACC,GAC3C,OACI,wBAAIC,IAAKD,EAAON,UACZ,kBAAC,EAAD,CACIF,MAAOQ,EAAOE,WACdT,KAAMO,EAAOP,KACbC,SAAUM,EAAON,SACjBC,OAAQK,EAAOL,aAM/B,OACI,wBAAIJ,UAAU,eACTM,ICuDEM,E,YAhEX,aAAe,IAAD,8BACV,+CAYJC,QAAU,WACNC,IAAMC,IAAI,0GACTC,MAAK,SAAAC,GACF,IAAIC,EAAaD,EAAIE,KACjBC,EAAc,GACdC,EAAI,EAER,IAAI,IAAIX,KAAOQ,EAAW,CACtB,IAAII,EAAa,EAAKC,MAAMd,OAAOY,GAC/BG,EAAa,YAEDC,IAAbH,IACIA,EAAWpB,KAAKgB,EAAWR,GAAKR,KAAMsB,EAAa,MAC9CF,EAAWpB,KAAKgB,EAAWR,GAAKR,KAAMsB,EAAa,QACnDF,EAAWpB,OAAOgB,EAAWR,GAAKR,OAAMsB,EAAa,SAGjE,IAAIE,EAAY,CACZxB,KAAMgB,EAAWR,GAAKR,KACtBE,OAAQc,EAAWR,GAAKN,OACxBD,SAAUO,EACVC,WAAYa,GAEhBJ,EAAYO,KAAKD,GACjBL,IAEJ,EAAKO,SAAS,CACVnB,OAAQW,EACRS,eAAgBT,IAEpB,EAAKU,iBA3CC,EA+CdA,WAAa,WACT,IAAIC,EAAqB,EAAKR,MAAMd,OAAOuB,QAAO,SAAAvB,GAC9C,OAAOA,EAAON,SAAS8B,cAAcC,SAAS,EAAKC,YAAYC,MAAMH,kBAEzE,EAAKL,SAAS,CAACC,eAAgBE,KAjD/B,EAAKR,MAAQ,CACTd,OAAQ,GACRoB,eAAgB,IAJV,E,iFASVQ,KAAKxB,UACLwB,KAAKC,MAAQC,YAAYF,KAAKxB,QAAS,O,+BA4ClC,IAAD,OACJ,OACI,yBAAKb,UAAU,UACX,2BAAOwC,KAAK,OAAOC,YAAY,SAASC,WAAS,EAACC,SAAUN,KAAKP,WAAYc,IAAK,SAAAC,GAAK,OAAG,EAAKV,YAAcU,KAC7G,kBAAC,EAAD,CAAYtC,WAAY8B,KAAKd,MAAMM,sB,GA5D9BiB,aCENC,EATC,WACZ,OACI,kBAAC,WAAD,KACI,wCACA,yBAAK/C,UAAU,WCUZgD,MAXf,WACE,OACE,yBAAKhD,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCCciD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.c2c45044.chunk.js","sourcesContent":["import React, { Fragment } from \"react\"\n\nconst CryptoItem = props => {\n    return (\n        <Fragment>\n            <span>Last rate:</span>\n            <span className={props.color}> {props.last} </span>\n            <span>{props.currency}</span>\n            <span>[{props.symbol}]</span>\n        </Fragment>\n    )\n}\n\nexport default CryptoItem;","import React from 'react'\nimport CryptoItem from './CryptoItem'\n\nconst CryptoList = props => {\n\n    const cryptoCollection = props.cryptoList.map((crypto)=>{\n        return (\n            <li key={crypto.currency} >\n                <CryptoItem\n                    color={crypto.colorClass}\n                    last={crypto.last}\n                    currency={crypto.currency}\n                    symbol={crypto.symbol}\n                />\n            </li>\n        )\n    });\n\n    return (\n        <ul className='crypto-list'>\n            {cryptoCollection}\n        </ul>\n    )\n}\n\nexport default CryptoList;","import React, { Component } from 'react'\nimport axios from 'axios';\nimport CryptoList from './components/CryptoList'\n\n\n//AXIOS Library\n\n//https://blockchain.info/pl/ticker?fbclid=IwAR0Gutl6Oe8kSCG1JeRSuzhjo5iWi6h-MMHAOTSmYtVWSXDwIl6g-Xk1_tI\n\nclass Crypto extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            crypto: [],\n            filteredCrypto: []\n        }\n    }\n\n    componentDidMount(){\n        this.getData();\n        this.timer = setInterval(this.getData, 1000);\n    }\n\n    getData = () => {\n        axios.get('https://blockchain.info/pl/ticker?fbclid=IwAR0Gutl6Oe8kSCG1JeRSuzhjo5iWi6h-MMHAOTSmYtVWSXDwIl6g-Xk1_tI')\n        .then(res => {\n            let cryptoData = res.data;\n            let cryptoArray = [];\n            let i = 0;\n\n            for(let key in cryptoData){\n                let prevCrypto = this.state.crypto[i];\n                let classValue = 'blue';\n\n                if(prevCrypto!==undefined) {\n                    if(prevCrypto.last>cryptoData[key].last) classValue = 'red';\n                    else if(prevCrypto.last<cryptoData[key].last) classValue = 'green';\n                    else if(prevCrypto.last===cryptoData[key].last) classValue = 'blue';\n                }\n\n                let cryptoObj = {\n                    last: cryptoData[key].last,\n                    symbol: cryptoData[key].symbol,\n                    currency: key,\n                    colorClass: classValue\n                }\n                cryptoArray.push(cryptoObj);\n                i++;\n            }\n            this.setState({\n                crypto: cryptoArray,\n                filteredCrypto: cryptoArray\n            });\n            this.filterData();\n        })\n    }\n\n    filterData = () => {\n        let filteredCryptoData = this.state.crypto.filter(crypto => {\n            return crypto.currency.toLowerCase().includes(this.filterInput.value.toLowerCase());\n        })\n        this.setState({filteredCrypto: filteredCryptoData});\n    }\n\n    render(){\n        return(\n            <div className=\"crypto\">\n                <input type=\"text\" placeholder=\"Filter\" autoFocus onChange={this.filterData} ref={input=> this.filterInput = input}></input>\n                <CryptoList cryptoList={this.state.filteredCrypto}/>\n            </div>\n        );\n    }\n}\n\nexport default Crypto;","import React, { Fragment } from 'react'\n\nconst Heading = () => {\n    return (\n        <Fragment>\n            <h2>Btn Rate</h2>\n            <div className=\"logo\"></div>\n        </Fragment>\n    )\n}\n\nexport default Heading;","import React from 'react';\nimport './App.css';\nimport Crypto from './Crypto'\nimport Heading from './components/Heading';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Heading />\n      </header>\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}